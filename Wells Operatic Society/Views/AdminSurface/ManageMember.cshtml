@using WellsOperaticSociety.Models.Enums
@inherits Umbraco.Web.Mvc.UmbracoViewPage<WellsOperaticSociety.Web.Models.ManageMemberViewModel>
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-warning">@TempData["ErrorMessage"]</div>
}
<h2 class="section-title">Update Member Information</h2>
@using (Html.BeginUmbracoForm("UpdateMember", "AdminSurface"))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    @Html.HiddenFor(m => m.Member.Id)
    <div class="form-group">
        @Html.LabelFor(m => m.Member.Name)
        @Html.TextBoxFor(m => m.Member.Name, new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.Member.Name) })
        @Html.ValidationMessageFor(m => m.Member.Name)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Member.Email)
        @Html.TextBoxFor(m => m.Member.Email, new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.Member.Email), type = "email" })
        @Html.ValidationMessageFor(m => m.Member.Email)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Member.TelephoneNumber)
        @Html.TextBoxFor(m => m.Member.TelephoneNumber, new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.Member.TelephoneNumber) })
        @Html.ValidationMessageFor(m => m.Member.TelephoneNumber)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Member.MobileNumber)
        @Html.TextBoxFor(m => m.Member.MobileNumber, new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.Member.MobileNumber) })
        @Html.ValidationMessageFor(m => m.Member.MobileNumber)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Member.DateOfBirth)
        @Html.TextBoxFor(m => m.Member.DateOfBirth, "{0:d}", new { @class = "form-control datePicker", placeholder = Html.DisplayNameFor(n => n.Member.DateOfBirth) })
        @Html.ValidationMessageFor(m => m.Member.DateOfBirth)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Member.DateApprovedForMembership)
        @Html.TextBoxFor(m => m.Member.DateApprovedForMembership, "{0:d}", new { @class = "form-control datePicker", placeholder = Html.DisplayNameFor(n => n.Member.DateApprovedForMembership) })
        @Html.ValidationMessageFor(m => m.Member.DateApprovedForMembership)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Member.DateLifeMembershipGranted)
        @Html.TextBoxFor(m => m.Member.DateLifeMembershipGranted, "{0:d}", new { @class = "form-control datePicker", placeholder = Html.DisplayNameFor(n => n.Member.DateLifeMembershipGranted) })
        @Html.ValidationMessageFor(m => m.Member.DateLifeMembershipGranted)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Member.DateDeclinedForMembership)
        @Html.TextBoxFor(m => m.Member.DateDeclinedForMembership, "{0:d}", new { @class = "form-control datePicker", placeholder = Html.DisplayNameFor(n => n.Member.DateDeclinedForMembership) })
        @Html.ValidationMessageFor(m => m.Member.DateDeclinedForMembership)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Member.VehicleRegistration1)
        @Html.TextBoxFor(m => m.Member.VehicleRegistration1, new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.Member.VehicleRegistration1) })
        @Html.ValidationMessageFor(m => m.Member.VehicleRegistration1)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Member.VehicleRegistration2)
        @Html.TextBoxFor(m => m.Member.VehicleRegistration2, new {@class = "form-control", placeholder = Html.DisplayNameFor(n => n.Member.VehicleRegistration2)})
        @Html.ValidationMessageFor(m => m.Member.VehicleRegistration2)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Member.ContactEmail)
        @Html.TextBoxFor(m => m.Member.ContactEmail, new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.Member.ContactEmail) })
        @Html.ValidationMessageFor(m => m.Member.ContactEmail)
    </div>
    <div class="form-group">
        <label>
            Deactivate the user
            @Html.CheckBoxFor(m => m.Member.Deactivated, new { @class = "form-control" })
        </label>
        @Html.ValidationMessageFor(m => m.Member.Deactivated)
    </div>

    <button type="submit" class="btn btn-default">Update Information</button>
}

<h2 class="section-title">Add new membership</h2>
@using (Html.BeginUmbracoForm("AddMembership", "AdminSurface"))
{
    @Html.Partial("AddMembershipForm", Model.NewMembership)
}

<h2 class="section-title">Manage Membership</h2>
@if (Model.Memberships != null && Model.Memberships.Any())
{
    <table class="table table-hover">
        <thead>
            <tr><th>Membership Id</th><th>Start</th><th>End</th><th>Membership Type</th><th>Subscription</th><th></th></tr>
        </thead>
        <tbody>
            @foreach (var membership in Model.Memberships)
            {
                <tr>
                    <td>@membership.MembershipId</td>
                    <td>@membership.StartDate.ToShortDateString()</td>
                    <td>@membership.EndDate.ToShortDateString()</td>
                    <td>@membership.MembershipTypeName</td>
                    <td>@membership.IsSubscription</td>
                    <td>
                        @if (membership.IsSubscription)
                    {
                        if (membership.CancelAtEnd && membership.StripeSubscriptionId.IsNotNullOrEmpty())
                        {
                                <button type="button" class="btn btn-default disabled">Canceling</button>
                            }
                            else
                            {
                                using (Html.BeginUmbracoForm("CancelSubscription", "AdminSurface"))
                                {
                                    @Html.HiddenFor(m => membership.StripeSubscriptionId)
                                    @Html.HiddenFor(m => membership.Member)
                                    <button type="submit" class="btn btn-warning btn-fill">Cancel subscription</button>
                                }
                            }
                        }
                        <br />
                        @using (Html.BeginUmbracoForm("DeleteMembership", "AdminSurface"))
                    {
                            @Html.HiddenFor(m => membership.MembershipId)
                            <button type="submit" class="btn btn-danger btn-fill">Delete</button>
                            if (membership.IsSubscription)
                            {
                                <span>Deleting the record will not cancle the subscription</span>
                            }
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="alert alert-info">There are no memberships related to this member</p>
}
<script>
    $(document).ready(function () {
        $(".datePicker").datepicker({ dateFormat: "dd/mm/yy" });
        //date work around
        $.validator.addMethod('date',
            function (value, element, params) {
                if (this.optional(element)) {
                    return true;
                }

                var ok = true;
                try {
                    $.datepicker.parseDate('dd/mm/yy', value);
                }
                catch (err) {
                    ok = false;
                }
                return ok;
            });
    });
</script>
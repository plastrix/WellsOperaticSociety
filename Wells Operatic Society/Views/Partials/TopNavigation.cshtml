@using System;
@using WellsOperaticSociety.BusinessLogic
@{
    UmbracoHelper helper = new UmbracoHelper(UmbracoContext.Current);

    var topLevel = GetTopLevelNodes(helper);
    var membershipHelper = new Umbraco.Web.Security.MembershipHelper(UmbracoContext.Current);
}

<div id="navbar">
    <nav class="navbar navbar-default" role="navigation">
        <div class="container-fluid">
            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
                <ul class="nav navbar-nav">
                    <li><a href="#">Work in progress...</a></li>
                    <li class="active"><a href="#">Link</a></li>
                    <li><a href="#">Link</a></li>
                    <li class="dropdown">
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown <b class="caret"></b></a>
                        <ul class="dropdown-menu">
                            <li><a href="#">Action</a></li>
                            <li><a href="#">Another action</a></li>
                            <li><a href="#">Something else here</a></li>
                            <li class="divider"></li>
                            <li><a href="#">Separated link</a></li>
                            <li class="divider"></li>
                            <li><a href="#">One more separated link</a></li>
                        </ul>
                    </li>
                </ul>
            </div><!-- /.navbar-collapse -->
        </div><!-- /.container-fluid -->
    </nav>
</div><!--  end navbar -->



<nav class="navbar navbar-inverse navbar-fixed-top" role="navigation">
    <div class="container">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
            <button id="menu-toggle" type="button" class="navbar-toggle">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar bar1"></span>
                <span class="icon-bar bar2"></span>
                <span class="icon-bar bar3"></span>
            </button>
            <a class="navbar-brand" href="#">WOS Logo</a>
        </div>
        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse">
            <ul class="nav navbar-nav navbar-right">
                @foreach (var parent in topLevel)
                {
                    var loginAcces = umbraco.library.IsProtected(parent.Id, parent.Path) && umbraco.library.HasAccess(parent.Id, parent.Path);
                    if (!umbraco.library.IsProtected(parent.Id, parent.Path) || loginAcces)
                    {
                        var children = GetChildNodes(parent);
                        if (children.Any())
                        {
                            <li class="dropdown">
                                <a href="#" class="dropdown-toggle" data-toggle="dropdown">@GetNavigationTitle(parent)<b class="caret"></b></a>
                                <ul class="dropdown-menu">
                                    @foreach (var child in children)
                                    {
                                        <li><a href="@child.Url">@GetNavigationTitle(child)</a></li>
                                    }
                                </ul>
                            </li>
                        }
                        else
                        {
                            <li><a href="@parent.Url">@GetNavigationTitle(parent)</a></li>
                        }
                    }
                }
            </ul>
        </div><!-- /.navbar-collapse -->
    @if(membershipHelper.IsLoggedIn())
    {
        <p>Welcome @membershipHelper.GetCurrentLoginStatus().Name <a href="@Url.Action("Logout","MembershipSurface")">Logout</a></p>
    }
    else
    {
        var dataManager = new DataManager();
        <a href="@dataManager.GetLoginNode().Url">Login</a> 
    }
    </div><!-- /.container-fluid -->
</nav>

@functions
{

    IEnumerable<IPublishedContent> GetTopLevelNodes(UmbracoHelper helper)
    {
        return helper.TypedContentAtRoot().Where(n => n.GetPropertyValue<bool>("showInNavigation"));
    }


    private IList<IPublishedContent> GetChildNodes(IPublishedContent parent)
    {
        var result = new List<IPublishedContent>();

        ScanChildren(result, parent);
        return result.ToList();
    }

    private void ScanChildren(IList<IPublishedContent> result, IPublishedContent parent)
    {
        foreach (var child in parent.Children)
        {
            if (child.GetPropertyValue<bool>("showInNavigation")) result.Add(child);
            ScanChildren(result, child);
        }
    }

    private string GetNavigationTitle(IPublishedContent page)
    {
        string title = page.GetPropertyValue<string>("navigationTitle");
        
        if (title.IsNotNullOrEmpty()) return title;

        return page.Name;
    }

}
@using System;
@using WellsOperaticSociety.BusinessLogic
@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@{
    var topLevel = GetTopLevelNodes();
    var membershipHelper = new Umbraco.Web.Security.MembershipHelper(UmbracoContext.Current);
}
<nav class="@GetNavBarCss()" role="navigation">
    <div class="container">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
            <button id="menu-toggle" type="button" class="navbar-toggle">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar bar1"></span>
                <span class="icon-bar bar2"></span>
                <span class="icon-bar bar3"></span>
            </button>
            <a class="navbar-brand" href="/">Wells Little Theatre</a>
            <div class="navbar-right" style="margin: 19px 15px; padding: 5px 0;">
                <form method="get" action="/search" role="search">
                    <div class="input-group input-group-sm">
                        <input type="text" name="q" class="form-control" placeholder="Search ...">

                        <span class="input-group-btn">
                            <button class="btn btn-default" type="submit"><i class="fa fa-search"></i></button>
                        </span>
                    </div>
                </form>
            </div>
        </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse">
            <ul class="nav navbar-nav navbar-right">
                @foreach (var parent in topLevel)
                {
                    var loginAcces = library.IsProtected(parent.Id, parent.Path) && umbraco.library.HasAccess(parent.Id, parent.Path);
                    if (!library.IsProtected(parent.Id, parent.Path) || loginAcces)
                    {
                        var children = GetChildNodes(parent);
                        if (children.Any())
                        {
                            <li class="dropdown">
                                <a href="#" class="dropdown-toggle" data-toggle="dropdown">@GetNavigationTitle(parent)<b class="caret"></b></a>
                                <ul class="dropdown-menu">
                                    @foreach (var child in children)
                                    {
                                        <li><a href="@child.Url">@GetNavigationTitle(child)</a></li>
                                    }
                                </ul>
                            </li>
                        }
                        else
                        {
                            <li><a href="@parent.Url">@GetNavigationTitle(parent)</a></li>
                        }
                    }
                }
                <li>
                    @if (membershipHelper.IsLoggedIn())
                    {
                        <a href="@Url.Action("Logout", "MembershipSurface")">@membershipHelper.GetCurrentLoginStatus().Name Logout</a>
                    }
                    else
                    {
                        var dataManager = new DataManager();
                        <a href="@dataManager.GetLoginNode().Url">Login</a>
                    }
                </li>
            </ul>
        </div>

    </div>
</nav>
@if ((Model.Content.HasProperty("heroImage") && Model.Content.GetPropertyValue<int>("heroImage") != 0))
{
    <div class="visible-xs" style="margin-top: 78px;"></div>
}
@functions
{
    readonly UmbracoHelper _helper = new UmbracoHelper(UmbracoContext.Current);

    IEnumerable<IPublishedContent> GetTopLevelNodes()
    {
        return _helper.TypedContentAtRoot().Where(n => n.GetPropertyValue<bool>("showInNavigation"));
    }


    private IList<IPublishedContent> GetChildNodes(IPublishedContent parent)
    {
        var result = new List<IPublishedContent>();

        ScanChildren(result, parent);
        return result.ToList();
    }

    private void ScanChildren(IList<IPublishedContent> result, IPublishedContent parent)
    {
        foreach (var child in parent.Children)
        {
            if (child.GetPropertyValue<bool>("showInNavigation")) result.Add(child);
            ScanChildren(result, child);
        }
    }

    private string GetNavigationTitle(IPublishedContent page)
    {
        string title = page.GetPropertyValue<string>("navigationTitle");

        if (title.IsNotNullOrEmpty()) return title;

        return page.Name;
    }

    private string GetNavBarCss()
    {
        string classes = "navbar navbar-inverse  navbar-burger";
        if (Model.Content.HasProperty("heroImage") && Model.Content.GetPropertyValue<int>("heroImage") != 0)
            classes += " navbar-transparent navbar-fixed-top";

        return classes;
    }

}

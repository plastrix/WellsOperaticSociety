@using System;
@{
    UmbracoHelper helper = new UmbracoHelper(UmbracoContext.Current);

    var topLevel = GetTopLevelNodes(helper);

}

<nav class="navbar navbar-ct-azure navbar-transparent navbar-fixed-top" role="navigation">
    <div class="container">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
            <button id="menu-toggle" type="button" class="navbar-toggle">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar bar1"></span>
                <span class="icon-bar bar2"></span>
                <span class="icon-bar bar3"></span>
            </button>
            <a class="navbar-brand" href="#">WOS Logo</a>
        </div>
        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse">
            <ul class="nav navbar-nav navbar-right">
                @foreach (var parent in topLevel)
                {
                    var children = GetChildNodes(parent);
                    if (children.Any())
                    {
                        <li class="dropdown">
                            <a href="@parent.Url" data-toggle="dropdown" class="dropdown-toggle disabled">@GetNavigationTitle(parent)<b class="caret"></b></a>
                            <ul class="dropdown-menu">
                                @foreach (var child in children)
                                {
                                    <li><a href="@child.Url">@GetNavigationTitle(child)</a></li>
                                }
                            </ul>
                        </li>
                    }
                    else
                    {
                        <li><a href="@parent.Url">@GetNavigationTitle(parent)</a></li>
                    }
                }
            </ul>
        </div><!-- /.navbar-collapse -->
    </div><!-- /.container-fluid -->
</nav>

@functions
{

    IEnumerable<IPublishedContent> GetTopLevelNodes(UmbracoHelper helper)
    {
        return helper.TypedContentAtRoot().Where(n => n.GetPropertyValue<bool>("showInNavigation"));
    }


    private IList<IPublishedContent> GetChildNodes(IPublishedContent parent)
    {
        var result = new List<IPublishedContent>();

        ScanChildren(result, parent);
        return result.ToList();
    }

    private void ScanChildren(IList<IPublishedContent> result, IPublishedContent parent)
    {
        foreach (var child in parent.Children)
        {
            if (child.GetPropertyValue<bool>("showInNavigation")) result.Add(child);
            ScanChildren(result, child);
        }
    }

    private string GetNavigationTitle(IPublishedContent page)
    {
        string title = page.GetPropertyValue<string>("navigationTitle");
        
        if (title.IsNotNullOrEmpty()) return title;

        return page.Name;
    }

}